buildscript {

    apply from: "config.gradle"
    apply from: "maven.gradle"

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath libs.gradle
        classpath libs.kotlin.plugin
        classpath libs.cpd
        classpath libs.detekt.plugin
        classpath libs.ktlint
        classpath libs.dokka
    }
}

allprojects {

    repositories {
        google()
        mavenCentral()
        jcenter() {
            content {
                includeModule("org.jetbrains.kotlinx", "kotlinx-html-jvm")
            }
        }
    }

    def buildProperties = new Properties()
    file(rootDir.absolutePath + "/build.properties").withInputStream { buildProperties.load(it) }
    if (buildProperties.getProperty("build.debug").toBoolean()) {
        configurations.all {
            resolutionStrategy {
                dependencySubstitution {
                    def library = libs.library.get()
                    def librarynoop = libs.librarynoop.get()
                    def chucker = libs.toolchucker.get()
                    def collar = libs.toolcollar.get()
                    def dbinspector = libs.tooldbinspector.get()
                    def googleplay = libs.toolgoogleplay.get()
                    def thimble = libs.toolthimble.get()

                    substitute module(library.getModule().toString() + ":" + library.getVersionConstraint().toString()) with project(':sentinel')
                    substitute module(librarynoop.getModule().toString() + ":" + librarynoop.getVersionConstraint().toString()) with project(':sentinel-no-op')
                    substitute module(chucker.getModule().toString() + ":" + chucker.getVersionConstraint().toString()) with project(':tool-chucker')
                    substitute module(collar.getModule().toString() + ":" + collar.getVersionConstraint().toString()) with project(':tool-collar')
                    substitute module(dbinspector.getModule().toString() + ":" + dbinspector.getVersionConstraint().toString()) with project(':tool-dbinspector')
                    substitute module(googleplay.getModule().toString() + ":" + googleplay.getVersionConstraint().toString()) with project(':tool-googleplay')
                    substitute module(thimble.getModule().toString() + ":" + thimble.getVersionConstraint().toString()) with project(':tool-thimble')
                }
            }
        }
    }
}

subprojects {
    apply from: "$rootDir/cpd.gradle"
    apply from: "$rootDir/detekt.gradle"
    apply from: "$rootDir/ktlint.gradle"
    apply from: "$rootDir/dokka.gradle"
}

apply from: "deploy.gradle"

tasks.withType(JavaCompile) {
    options.compilerArgs += ["--release", "8"]
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task lintAll(dependsOn: [
        ':sentinel:lintRelease',
        ':sentinel-no-op:lintRelease',
        ':tool-chucker:lintRelease',
        ':tool-collar:lintRelease',
        ':tool-dbinspector:lintRelease',
        ':tool-googleplay:lintRelease',
        ':tool-thimble:lintRelease'
]) {
    group = "Verification"
    description = "Run Detekt on all modules"
}

task detektAll(dependsOn: [
        ':sentinel:detekt',
        ':sentinel-no-op:detekt',
        ':tool-chucker:detekt',
        ':tool-collar:detekt',
        ':tool-dbinspector:detekt',
        ':tool-googleplay:detekt',
        ':tool-thimble:detekt'
]) {
    group = "Verification"
    description = "Run Detekt on all modules"
}

task ktlintAll(dependsOn: [
        ':sentinel:ktlintCheck',
        ':sentinel-no-op:ktlintCheck',
        ':tool-chucker:ktlintCheck',
        ':tool-collar:ktlintCheck',
        ':tool-dbinspector:ktlintCheck',
        ':tool-googleplay:ktlintCheck',
        ':tool-thimble:ktlintCheck'
]) {
    group = "Verification"
    description = "Run ktLint on all modules"
}

task cpdAll(dependsOn: [
        ':sentinel:cpdCheck',
        ':sentinel-no-op:cpdCheck',
        ':tool-chucker:cpdCheck',
        ':tool-collar:cpdCheck',
        ':tool-dbinspector:cpdCheck',
        ':tool-googleplay:cpdCheck',
        ':tool-thimble:cpdCheck'
]) {
    group = "Verification"
    description = "Run CPD on all modules"
}

task runStaticChecks(dependsOn: [
        ':lintAll',
        ':detektAll',
        ':ktlintAll',
        ':cpdAll'
]) {
    group = "Verification"
    description = "Run static checks on all modules"
}